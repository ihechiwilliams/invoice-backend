// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for InvoiceStatus.
const (
	InvoiceStatusDraft   InvoiceStatus = "draft"
	InvoiceStatusOverdue InvoiceStatus = "overdue"
	InvoiceStatusPaid    InvoiceStatus = "paid"
)

// Defines values for UpdateInvoiceStatus.
const (
	UpdateInvoiceStatusDraft   UpdateInvoiceStatus = "draft"
	UpdateInvoiceStatusOverdue UpdateInvoiceStatus = "overdue"
	UpdateInvoiceStatusPaid    UpdateInvoiceStatus = "paid"
)

// Activity defines model for Activity.
type Activity struct {
	CreatedAt   *time.Time          `json:"createdAt,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Type        *string             `json:"type,omitempty"`
}

// Customer defines model for Customer.
type Customer struct {
	Email *string             `json:"email,omitempty"`
	Id    *openapi_types.UUID `json:"id,omitempty"`
	Name  *string             `json:"name,omitempty"`
	Phone *string             `json:"phone,omitempty"`
}

// Invoice defines model for Invoice.
type Invoice struct {
	Customer    *string             `json:"customer,omitempty"`
	DueDate     *openapi_types.Date `json:"dueDate,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Items       *[]Item             `json:"items,omitempty"`
	Sender      *string             `json:"sender,omitempty"`
	Status      *InvoiceStatus      `json:"status,omitempty"`
	TotalAmount *float32            `json:"totalAmount,omitempty"`
}

// InvoiceStatus defines model for Invoice.Status.
type InvoiceStatus string

// Item defines model for Item.
type Item struct {
	Description *string  `json:"description,omitempty"`
	Price       *float32 `json:"price,omitempty"`
	Quantity    *int     `json:"quantity,omitempty"`
}

// NewCustomer defines model for NewCustomer.
type NewCustomer struct {
	Email *string `json:"email,omitempty"`
	Name  *string `json:"name,omitempty"`
	Phone *string `json:"phone,omitempty"`
}

// NewInvoice defines model for NewInvoice.
type NewInvoice struct {
	Customer *string             `json:"customer,omitempty"`
	DueDate  *openapi_types.Date `json:"dueDate,omitempty"`
	Items    *[]Item             `json:"items,omitempty"`
	Sender   *string             `json:"sender,omitempty"`
}

// UpdateInvoice defines model for UpdateInvoice.
type UpdateInvoice struct {
	DueDate *openapi_types.Date  `json:"dueDate,omitempty"`
	Status  *UpdateInvoiceStatus `json:"status,omitempty"`
}

// UpdateInvoiceStatus defines model for UpdateInvoice.Status.
type UpdateInvoiceStatus string

// GetInvoicesParams defines parameters for GetInvoices.
type GetInvoicesParams struct {
	// Status Filter invoices by status (paid, overdue, draft, etc.)
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// Date Filter invoices by date range
	Date *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`
}

// PostCustomersJSONRequestBody defines body for PostCustomers for application/json ContentType.
type PostCustomersJSONRequestBody = NewCustomer

// PostInvoicesJSONRequestBody defines body for PostInvoices for application/json ContentType.
type PostInvoicesJSONRequestBody = NewInvoice

// PatchInvoicesInvoiceIdJSONRequestBody defines body for PatchInvoicesInvoiceId for application/json ContentType.
type PatchInvoicesInvoiceIdJSONRequestBody = UpdateInvoice

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get recent activities
	// (GET /activities)
	GetActivities(w http.ResponseWriter, r *http.Request)
	// List all customers
	// (GET /customers)
	GetCustomers(w http.ResponseWriter, r *http.Request)
	// Create a new customer
	// (POST /customers)
	PostCustomers(w http.ResponseWriter, r *http.Request)
	// List all invoices
	// (GET /invoices)
	GetInvoices(w http.ResponseWriter, r *http.Request, params GetInvoicesParams)
	// Create a new invoice
	// (POST /invoices)
	PostInvoices(w http.ResponseWriter, r *http.Request)
	// Delete an invoice
	// (DELETE /invoices/{invoiceId})
	DeleteInvoicesInvoiceId(w http.ResponseWriter, r *http.Request, invoiceId string)
	// Get details of a specific invoice
	// (GET /invoices/{invoiceId})
	GetInvoicesInvoiceId(w http.ResponseWriter, r *http.Request, invoiceId string)
	// Update an invoice
	// (PATCH /invoices/{invoiceId})
	PatchInvoicesInvoiceId(w http.ResponseWriter, r *http.Request, invoiceId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get recent activities
// (GET /activities)
func (_ Unimplemented) GetActivities(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all customers
// (GET /customers)
func (_ Unimplemented) GetCustomers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new customer
// (POST /customers)
func (_ Unimplemented) PostCustomers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all invoices
// (GET /invoices)
func (_ Unimplemented) GetInvoices(w http.ResponseWriter, r *http.Request, params GetInvoicesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new invoice
// (POST /invoices)
func (_ Unimplemented) PostInvoices(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an invoice
// (DELETE /invoices/{invoiceId})
func (_ Unimplemented) DeleteInvoicesInvoiceId(w http.ResponseWriter, r *http.Request, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get details of a specific invoice
// (GET /invoices/{invoiceId})
func (_ Unimplemented) GetInvoicesInvoiceId(w http.ResponseWriter, r *http.Request, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an invoice
// (PATCH /invoices/{invoiceId})
func (_ Unimplemented) PatchInvoicesInvoiceId(w http.ResponseWriter, r *http.Request, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetActivities operation middleware
func (siw *ServerInterfaceWrapper) GetActivities(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetActivities(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCustomers operation middleware
func (siw *ServerInterfaceWrapper) GetCustomers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCustomers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCustomers operation middleware
func (siw *ServerInterfaceWrapper) PostCustomers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCustomers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetInvoices operation middleware
func (siw *ServerInterfaceWrapper) GetInvoices(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInvoicesParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", r.URL.Query(), &params.Date)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "date", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInvoices(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostInvoices operation middleware
func (siw *ServerInterfaceWrapper) PostInvoices(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostInvoices(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteInvoicesInvoiceId operation middleware
func (siw *ServerInterfaceWrapper) DeleteInvoicesInvoiceId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteInvoicesInvoiceId(w, r, invoiceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetInvoicesInvoiceId operation middleware
func (siw *ServerInterfaceWrapper) GetInvoicesInvoiceId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInvoicesInvoiceId(w, r, invoiceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchInvoicesInvoiceId operation middleware
func (siw *ServerInterfaceWrapper) PatchInvoicesInvoiceId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchInvoicesInvoiceId(w, r, invoiceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/activities", wrapper.GetActivities)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/customers", wrapper.GetCustomers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/customers", wrapper.PostCustomers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/invoices", wrapper.GetInvoices)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/invoices", wrapper.PostInvoices)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/invoices/{invoiceId}", wrapper.DeleteInvoicesInvoiceId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/invoices/{invoiceId}", wrapper.GetInvoicesInvoiceId)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/invoices/{invoiceId}", wrapper.PatchInvoicesInvoiceId)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXTW/jNhD9K8S0hxZQLaftSTc3QQsD7TZA29PCB0Ya2dxKJEMOHRiB/3tBUZ+R5I9u",
	"1tibJHI48x7fPFKvkKpSK4mSLCSvYNMdlrx6XKUk9oIO/lkbpdGQwGokNcgJsxX5l1yZkhMkkHHCH0iU",
	"CBHQQSMkYMkIuYVjBBna1AhNQkkfNBoX2WAt50Q2tUz4MIpvR0A9fcKU/NR7Z0mVaMblY8lF8TlVSF7i",
	"ZLzeKXlpfWu5VyLFCXZ7hY95dPjACUfET5V5IRpBWFaJ24dvDeaQwDdxp424Fka8Jiy7nQBuDD/4d4sy",
	"m6nZEicXmJeuhOQjaF6VovZoMudrzwzPCTZTO66IF6tSOTlUW14oTh0c6conNDNM+5JHNJ9TpDb17pxL",
	"GcGz45LqTqkHhSTczhX0AV/+jzrfRXYf8OUGyvuykprC9Y/2xcxCu6b6z9DruDL/SchcjSQHq8c1y5Vh",
	"JZd8K+SWiVC8jVizETZiXGaMBycWaBe+XkGFz1BjZX/4eCxREls9riGCPRobUtwtloulh6Q0Sq4FJPDT",
	"4m6xhAg0p12FMe5W969brPrMc8d9oesMEvgNadXNisCg1UraEPHjclmJR0nC0KRc60KkVXj8yYb+Cpt9",
	"sSbaw2eki+Pb0wRWrBCWmMqZwdTT0EPkZ1tXltwcAo6JOREQ31q/zz2QGx8Ztxtxipr7dtItmGmd4ypm",
	"OiBDRn7347woehM6OjpgG+8yyk7gf1T2DQHPDi39orLDVdhPQe77ZYXSJxEGM0jIODyOaL97t9TDvEN2",
	"mzFW34eYdWmK1uauKA5veL6vpjDOJL60XM9Q7YXXeMEp3a2bOb6bDS+RKqF+fGs0v4qC0LT2wp4OLFgc",
	"+84bW8RqX4tYZWsRQ0oX34P3LUjg2aE5QHP6NOYY9fgbeeAFBXjvZYbLLc7kqc25y3LGto+bWzRfc75c",
	"1XvtXs60nuj2sZFDu7WnG6+ngC/Udy3g27bdIO2Q1+bYu7bpapanSe63XPxaP62zYzi1Cww3h+EGPFTf",
	"m0XWTcy5blw/eE3QDnsVVQ3gT+RO/6K33pD3U603boKfxxePhsEA7CSDASPj8jR90VmP+lrpWd5SshkS",
	"F8XUpaQe8dA5sxpTkYv0HOeaU7qbMAb/+Svk/f39aXjnv8iilvPt4KrVTrZDSHi2HaogNPtpph+Nylzq",
	"X1iYBBE4U0ACOyJtkzjmWizqBFzrRarKeH8H43P1Lwo/DjPL2DC8mFlu09b+dt0/Gz1ZZrCoSCHVP6Zq",
	"MbSQx6WFn5L2puPPe94FdredceTfhqf/NsmG1/Q6undLP26O/wUAAP//o+Jq2MISAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
