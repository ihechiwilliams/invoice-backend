// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for InvoiceResponseDataStatus.
const (
	InvoiceResponseDataStatusDraft   InvoiceResponseDataStatus = "draft"
	InvoiceResponseDataStatusOverdue InvoiceResponseDataStatus = "overdue"
	InvoiceResponseDataStatusPaid    InvoiceResponseDataStatus = "paid"
)

// Defines values for UpdateInvoiceStatus.
const (
	UpdateInvoiceStatusDraft   UpdateInvoiceStatus = "draft"
	UpdateInvoiceStatusOverdue UpdateInvoiceStatus = "overdue"
	UpdateInvoiceStatusPaid    UpdateInvoiceStatus = "paid"
)

// Activity defines model for Activity.
type Activity struct {
	CreatedAt   *time.Time          `json:"createdAt,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Type        *string             `json:"type,omitempty"`
}

// CustomerFilters defines model for CustomerFilters.
type CustomerFilters struct {
	UserId *[]string `json:"user_id,omitempty"`
}

// CustomerRequestBodyData defines model for CustomerRequestBodyData.
type CustomerRequestBodyData struct {
	Email *string `json:"email,omitempty"`
	Name  *string `json:"name,omitempty"`
	Phone *string `json:"phone,omitempty"`
}

// CustomerResponseData defines model for CustomerResponseData.
type CustomerResponseData struct {
	Email string             `json:"email"`
	Id    openapi_types.UUID `json:"id"`
	Name  string             `json:"name"`
	Phone string             `json:"phone"`
}

// Error defines model for Error.
type Error struct {
	Code   string                  `json:"code"`
	Detail string                  `json:"detail"`
	Meta   *map[string]interface{} `json:"meta,omitempty"`
	Status int                     `json:"status"`
	Title  string                  `json:"title"`
}

// ErrorResponse Response that contains the list of errors
type ErrorResponse struct {
	Errors []Error `json:"errors"`
}

// InvoiceFilters defines model for InvoiceFilters.
type InvoiceFilters struct {
	CustomerId *[]string `json:"customer_id,omitempty"`
}

// InvoiceRequestBodyData defines model for InvoiceRequestBodyData.
type InvoiceRequestBodyData struct {
	Customer string             `json:"customer"`
	DueDate  openapi_types.Date `json:"dueDate"`
	Items    []Item             `json:"items"`
	Sender   string             `json:"sender"`
}

// InvoiceResponseData defines model for InvoiceResponseData.
type InvoiceResponseData struct {
	Customer    *string                    `json:"customer,omitempty"`
	DueDate     *openapi_types.Date        `json:"dueDate,omitempty"`
	Id          *openapi_types.UUID        `json:"id,omitempty"`
	Items       *[]Item                    `json:"items,omitempty"`
	Sender      *string                    `json:"sender,omitempty"`
	Status      *InvoiceResponseDataStatus `json:"status,omitempty"`
	TotalAmount *float32                   `json:"totalAmount,omitempty"`
}

// InvoiceResponseDataStatus defines model for InvoiceResponseData.Status.
type InvoiceResponseDataStatus string

// Item defines model for Item.
type Item struct {
	Description *string  `json:"description,omitempty"`
	Price       *float32 `json:"price,omitempty"`
	Quantity    *int     `json:"quantity,omitempty"`
}

// UpdateInvoice defines model for UpdateInvoice.
type UpdateInvoice struct {
	DueDate *openapi_types.Date  `json:"dueDate,omitempty"`
	Status  *UpdateInvoiceStatus `json:"status,omitempty"`
}

// UpdateInvoiceStatus defines model for UpdateInvoice.Status.
type UpdateInvoiceStatus string

// CustomerResponse defines model for CustomerResponse.
type CustomerResponse struct {
	Data CustomerResponseData `json:"data"`
}

// CustomersResponse defines model for CustomersResponse.
type CustomersResponse struct {
	Data []CustomerResponseData `json:"data"`
}

// InvoiceResponse defines model for InvoiceResponse.
type InvoiceResponse struct {
	Data InvoiceResponseData `json:"data"`
}

// InvoicesResponse defines model for InvoicesResponse.
type InvoicesResponse struct {
	Data []InvoiceResponseData `json:"data"`
}

// CreateCustomerRequestBody defines model for CreateCustomerRequestBody.
type CreateCustomerRequestBody struct {
	Data CustomerRequestBodyData `json:"data"`
}

// CreateInvoiceRequestBody defines model for CreateInvoiceRequestBody.
type CreateInvoiceRequestBody struct {
	Data InvoiceRequestBodyData `json:"data"`
}

// V1GetCustomersParams defines parameters for V1GetCustomers.
type V1GetCustomersParams struct {
	Data *struct {
		Filters *CustomerFilters `json:"filters,omitempty"`
	} `json:"data,omitempty"`
}

// V1CreateCustomerJSONBody defines parameters for V1CreateCustomer.
type V1CreateCustomerJSONBody struct {
	Data CustomerRequestBodyData `json:"data"`
}

// V1GetInvoicesParams defines parameters for V1GetInvoices.
type V1GetInvoicesParams struct {
	// Data Filter invoices by status (paid, overdue, draft, etc.)
	Data *struct {
		Filters *InvoiceFilters `json:"filters,omitempty"`
	} `json:"data,omitempty"`
}

// V1CreateInvoiceJSONBody defines parameters for V1CreateInvoice.
type V1CreateInvoiceJSONBody struct {
	Data InvoiceRequestBodyData `json:"data"`
}

// V1CreateCustomerJSONRequestBody defines body for V1CreateCustomer for application/json ContentType.
type V1CreateCustomerJSONRequestBody V1CreateCustomerJSONBody

// V1CreateInvoiceJSONRequestBody defines body for V1CreateInvoice for application/json ContentType.
type V1CreateInvoiceJSONRequestBody V1CreateInvoiceJSONBody

// V1UpdateInvoiceJSONRequestBody defines body for V1UpdateInvoice for application/json ContentType.
type V1UpdateInvoiceJSONRequestBody = UpdateInvoice

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get recent activities
	// (GET /v1/activities)
	V1GetActivities(w http.ResponseWriter, r *http.Request)
	// List all customers
	// (GET /v1/customers)
	V1GetCustomers(w http.ResponseWriter, r *http.Request, params V1GetCustomersParams)
	// Create a new customer
	// (POST /v1/customers)
	V1CreateCustomer(w http.ResponseWriter, r *http.Request)
	// List all invoices
	// (GET /v1/invoices)
	V1GetInvoices(w http.ResponseWriter, r *http.Request, params V1GetInvoicesParams)
	// Create a new invoice
	// (POST /v1/invoices)
	V1CreateInvoice(w http.ResponseWriter, r *http.Request)
	// Delete an invoice
	// (DELETE /v1/invoices/{invoiceId})
	V1DeleteInvoice(w http.ResponseWriter, r *http.Request, invoiceId string)
	// Get details of a specific invoice
	// (GET /v1/invoices/{invoiceId})
	V1GetInvoice(w http.ResponseWriter, r *http.Request, invoiceId openapi_types.UUID)
	// Update an invoice
	// (PATCH /v1/invoices/{invoiceId})
	V1UpdateInvoice(w http.ResponseWriter, r *http.Request, invoiceId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get recent activities
// (GET /v1/activities)
func (_ Unimplemented) V1GetActivities(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all customers
// (GET /v1/customers)
func (_ Unimplemented) V1GetCustomers(w http.ResponseWriter, r *http.Request, params V1GetCustomersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new customer
// (POST /v1/customers)
func (_ Unimplemented) V1CreateCustomer(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all invoices
// (GET /v1/invoices)
func (_ Unimplemented) V1GetInvoices(w http.ResponseWriter, r *http.Request, params V1GetInvoicesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new invoice
// (POST /v1/invoices)
func (_ Unimplemented) V1CreateInvoice(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an invoice
// (DELETE /v1/invoices/{invoiceId})
func (_ Unimplemented) V1DeleteInvoice(w http.ResponseWriter, r *http.Request, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get details of a specific invoice
// (GET /v1/invoices/{invoiceId})
func (_ Unimplemented) V1GetInvoice(w http.ResponseWriter, r *http.Request, invoiceId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an invoice
// (PATCH /v1/invoices/{invoiceId})
func (_ Unimplemented) V1UpdateInvoice(w http.ResponseWriter, r *http.Request, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// V1GetActivities operation middleware
func (siw *ServerInterfaceWrapper) V1GetActivities(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1GetActivities(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1GetCustomers operation middleware
func (siw *ServerInterfaceWrapper) V1GetCustomers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params V1GetCustomersParams

	// ------------- Optional query parameter "data" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "data", r.URL.Query(), &params.Data)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "data", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1GetCustomers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1CreateCustomer operation middleware
func (siw *ServerInterfaceWrapper) V1CreateCustomer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1CreateCustomer(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1GetInvoices operation middleware
func (siw *ServerInterfaceWrapper) V1GetInvoices(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params V1GetInvoicesParams

	// ------------- Optional query parameter "data" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "data", r.URL.Query(), &params.Data)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "data", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1GetInvoices(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1CreateInvoice operation middleware
func (siw *ServerInterfaceWrapper) V1CreateInvoice(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1CreateInvoice(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1DeleteInvoice operation middleware
func (siw *ServerInterfaceWrapper) V1DeleteInvoice(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1DeleteInvoice(w, r, invoiceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1GetInvoice operation middleware
func (siw *ServerInterfaceWrapper) V1GetInvoice(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1GetInvoice(w, r, invoiceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// V1UpdateInvoice operation middleware
func (siw *ServerInterfaceWrapper) V1UpdateInvoice(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1UpdateInvoice(w, r, invoiceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/activities", wrapper.V1GetActivities)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/customers", wrapper.V1GetCustomers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/customers", wrapper.V1CreateCustomer)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/invoices", wrapper.V1GetInvoices)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/invoices", wrapper.V1CreateInvoice)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/invoices/{invoiceId}", wrapper.V1DeleteInvoice)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/invoices/{invoiceId}", wrapper.V1GetInvoice)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v1/invoices/{invoiceId}", wrapper.V1UpdateInvoice)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"d+1gUyImAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
