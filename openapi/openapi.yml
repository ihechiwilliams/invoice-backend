openapi: 3.0.0
info:
  title: Invoice Management API
  version: 1.0.0
  description: API for managing invoices, customers, and activities.
  contact:
    email: charlesclinton2003@gmail.com
servers:
  - url: https://api.invoiceapp.com
    description: Production server
  - url: https://staging.api.invoiceapp.com
    description: Staging server
tags:
  - name: invoices
    description: Operations related to invoices
  - name: Customers
    description: Manage customer data
  - name: Activities
    description: Track invoice activities
paths:
  /v1/invoices:
    get:
      summary: List all invoices
      description: List all invoices
      operationId: v1-Get-Invoices
      parameters:
        - in: query
          name: data
          description: Filter invoices by status (paid, overdue, draft, etc.)
          style: deepObject
          schema:
            type: object
            properties:
              filters:
                $ref: '#/components/schemas/InvoiceFilters'
              page_size:
                type: integer
                default: 25
                minimum: 1
                description: The page size
              page:
                type: integer
                default: 1
                minimum: 1
                description: The page number
      responses:
        '200':
          $ref: '#/components/responses/InvoicesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - invoices
    post:
      summary: Create a new invoice
      description: Endpoint to create invoice
      operationId: v1-Create-Invoice
      requestBody:
        $ref: '#/components/requestBodies/CreateInvoiceRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/InvoiceResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - invoices
  '/v1/invoices/{invoiceId}':
    get:
      summary: Get details of a specific invoice
      description: Get invoice by the id
      operationId: v1-Get-Invoice
      parameters:
        - name: invoiceId
          in: path
          required: true
          description: ID of the invoice
          schema:
            type: string
            format: uuid
            example: ddab76f7-f979-4a1f-97a8-7175aeac962d
      responses:
        '200':
          $ref: '#/components/responses/InvoiceResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - invoices
    patch:
      summary: Update an invoice
      operationId: v1-Update-Invoice
      tags:
        - invoices
      parameters:
        - name: invoiceId
          in: path
          required: true
          description: ID of the invoice
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInvoice'
      responses:
        '200':
          description: Invoice updated successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete an invoice
      operationId: v1-Delete-Invoice
      tags:
        - invoices
      parameters:
        - name: invoiceId
          in: path
          required: true
          description: ID of the invoice
          schema:
            type: string
      responses:
        '204':
          description: Invoice deleted successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/customers:
    get:
      summary: List all customers
      operationId: v1-Get-Customers
      parameters:
        - in: query
          name: data
          style: deepObject
          schema:
            type: object
            properties:
              filters:
                $ref: '#/components/schemas/CustomerFilters'
      tags:
        - Customers
      responses:
        '200':
          $ref: '#/components/responses/CustomersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new customer
      operationId: v1-Create-Customer
      tags:
        - Customers
      requestBody:
        $ref: '#/components/requestBodies/CreateCustomerRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/CustomerResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/activities:
    get:
      summary: Get recent activities
      operationId: v1-Get-Activities
      tags:
        - Activities
      responses:
        '200':
          description: A list of recent activities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
components:
  schemas:
    Error:
      type: object
      x-examples:
        Example 1:
          title: Server error
          detail: 'Service temporarily unavailable, retry later'
          status: 500
          code: server_error
          meta:
            caused_by: ClassName
      properties:
        title:
          type: string
        detail:
          type: string
        status:
          type: integer
        code:
          type: string
        meta:
          type: object
      required:
        - title
        - detail
        - status
        - code
    ErrorResponse:
      title: ErrorResponse
      type: object
      description: Response that contains the list of errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      required:
        - errors
    InvoiceRequestBodyData:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        customer_id:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        due_date:
          type: string
          format: date
        issue_date:
          type: string
          format: date
      required:
        - sender
        - customer
        - items
        - dueDate
    InvoiceFilters:
      type: object
      properties:
        id:
          type: array
          items:
            type: string
            example: aac84fa0-3ce1-4a7b-83f3-2ed463fcd0c9
        user_id:
          type: array
          items:
            type: string
            example: aac84fa0-3ce1-4a7b-83f3-2ed463fcd0c2
        customer_id:
          type: array
          items:
            type: string
            example: aac84fa0-3ce1-4a7b-83f3-2ed463fcd0c1
        invoice_number:
          type: array
          items:
            type: string
            example: 1293456789
        status:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceStatusEnum'
    InvoiceResponseData:
      type: object
      properties:
        id:
          type: string
          format: uuid
        sender:
          type: string
        customer:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        status:
          $ref: '#/components/schemas/InvoiceStatusEnum'
        due_date:
          type: string
          format: date
        total_amount:
          type: number
          format: float
      required:
        - id
        - sender
        - customer
        - items
        - status
        - due_date
        - total_Amount
    UpdateInvoice:
      type: object
      properties:
        status:
          type: string
          enum: [paid, overdue, draft]
        dueDate:
          type: string
          format: date
    Item:
      type: object
      properties:
        id:
          type: string
          format: uuid
        invoice_id:
          type: string
          format: uuid
        description:
          type: string
        quantity:
          type: integer
        unit_price:
          type: number
          format: float
        total_price:
          type: number
          format: float
    CustomerFilters:
      type: object
      properties:
        user_id:
          type: array
          items:
            type: string
    CustomerResponseData:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
        phone:
          type: string
      required:
        - id
        - name
        - email
        - phone
    CustomerRequestBodyData:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          type: string
      required:
        - user_id
        - name
        - email
        - phone
        - address
    Activity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
    InvoiceStatusEnum:
      type: string
      enum:
        - PENDING_PAYMENT
        - OVERDUE
        - DRAFT
        - PAID
      title: InvoiceStatus
  responses:
    InvoiceResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/InvoiceResponseData'
            required:
              - data
    InvoicesResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/InvoiceResponseData'
            required:
              - data
    CustomerResponse:
      description: example response
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/CustomerResponseData'
            required:
              - data
    CustomersResponse:
      description: customers response
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerResponseData'
            required:
              - data
  requestBodies:
    CreateInvoiceRequestBody:
      description: Create Invoice Request Body
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/InvoiceRequestBodyData'
            required:
              - data
    CreateCustomerRequestBody:
      description: Create Customer Request Body
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/CustomerRequestBodyData'
            required:
              - data